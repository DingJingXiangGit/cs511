import java.io.*;
import java.sql.*;
import java.util.*;
import java.nio.*;
import java.nio.charset.Charset;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

public class Tuple implements java.io.Serializable, Comparable<Tuple>{
	private static int[] types;
	public static final int  LONG = 0;
	public static final int  INT = 1;
	public static final int  SHORT = 2;
	public static final int  BYTE = 3;
	public static final int  FLOAT = 4;
	public static final int  DOUBLE = 5;
	public static final int  STRING = 6;
	private int compIndex;

	public Object[] properties;
	public int length = 0;

	public static void setTypes(int[] ts){
		types = ts;
	}

	public Tuple(String entry, String delimiter, int compareIndex) throws IOException{
		String[] tokens = entry.split(delimiter);
		this.compIndex = compareIndex;
		this.properties = new Object[types.length];
		this.length = types.length;
		for(int i = 0; i < types.length; ++i){
			try{
				switch(types[i]){
					case LONG:
						properties[i] = Long.parseLong(tokens[i].trim());
						break;
					case INT:
						properties[i] = Integer.parseInt(tokens[i].trim());
						break;
					case SHORT:
						properties[i] = Short.parseShort(tokens[i].trim());
						break;
					case BYTE:
						properties[i] = Byte.parseByte(tokens[i].trim());
						break;
					case FLOAT:
						properties[i] = Float.parseFloat(tokens[i].trim());
						break;
					case DOUBLE:
						properties[i] = Double.parseDouble(tokens[i].trim());
						break;
					case STRING:
						properties[i] = tokens[i].trim()+"\n";
						break;

				}
			}catch(Exception e){
				if(types[i] <=3){
					properties[i] = -1;
				}else if(types[i] == 4 ||types[i] == 5){
					properties[i] == 0.0;
				}
			}
		}
	}

	public byte[] getValue(int i){
		ByteBuffer buffer;
		try{
			switch(types[i]){
				case LONG:
					buffer = ByteBuffer.allocate(8);
					buffer.putLong(((Long)properties[i]).longValue());
					return buffer.array();
				case INT:
					buffer = ByteBuffer.allocate(4);
					buffer.putInt(((Integer)properties[i]).intValue());
					return buffer.array();
				case SHORT:
					buffer = ByteBuffer.allocate(2);
					buffer.putShort(((Short)properties[i]).shortValue());
					return buffer.array();
				case BYTE:
					buffer = ByteBuffer.allocate(1);
					buffer.put(((Byte)properties[i]).byteValue());
					return buffer.array();
				case FLOAT:
					buffer = ByteBuffer.allocate(4);
					buffer.putFloat(((Float)properties[i]).floatValue());
					return buffer.array();
				case DOUBLE:
					buffer = ByteBuffer.allocate(8);
					buffer.putDouble(((Double)properties[i]).doubleValue());
					return buffer.array();
				case STRING:
					return ((String)properties[i]).getBytes();

			}
		}
		catch(Exception e){

		}
		return new byte[0];
	}

	public int compareTo(Tuple other){
		switch(types[this.compIndex]){
			case LONG:{
					  Long thisValue = (Long)this.properties[this.compIndex];
					  Long otherValue = (Long)other.properties[this.compIndex];
					  return thisValue.compareTo(otherValue);
				  }
			case INT:{
					 Integer thisValue = (Integer)this.properties[this.compIndex];
					 Integer otherValue = (Integer)other.properties[this.compIndex];
					 return thisValue.compareTo(otherValue);
				 }
			case SHORT:{
					   Short thisValue = (Short)this.properties[this.compIndex];
					   Short otherValue = (Short)other.properties[this.compIndex];
					   return thisValue.compareTo(otherValue);
				   }
			case BYTE:{
					  Byte thisValue = (Byte)this.properties[this.compIndex];
					  Byte otherValue = (Byte)other.properties[this.compIndex];
					  return thisValue.compareTo(otherValue);
				  }
			case FLOAT:{
					   Float thisValue = (Float)this.properties[this.compIndex];
					   Float otherValue = (Float)other.properties[this.compIndex];
					   return thisValue.compareTo(otherValue);
				   }
			case DOUBLE:{
					    Double thisValue = (Double)this.properties[this.compIndex];
					    Double otherValue = (Double)other.properties[this.compIndex];
					    return thisValue.compareTo(otherValue);
				    }
			case STRING:{
					    String thisValue = (String)this.properties[this.compIndex];
					    String otherValue = (String)other.properties[this.compIndex];
					    return thisValue.compareTo(otherValue);
				    }
		}
		return 0;
	}

	public static void main(String[] args){
		/*
		   int[] types = {2, 2, 6};
		   Tuple.setTypes(types);
		   Tuple tuple1 = new Tuple("123,123,abc",",",1);
		   Tuple tuple2 = new Tuple("246,012,abc",",",1);
		   List<Tuple> tuples = new ArrayList<Tuple>();
		   tuples.add(tuple1);
		   tuples.add(tuple2);
		   Collections.sort(tuples);
		   Tuple small = tuples.get(0);

		   System.out.println(small.properties[0] +", "+small.properties[1] + ", "+ small.properties[2]);
		 */
	}
}
